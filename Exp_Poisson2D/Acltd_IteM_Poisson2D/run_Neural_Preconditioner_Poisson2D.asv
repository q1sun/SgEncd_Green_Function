function run_Neural_Preconditioner_Poisson2D

format short e

%% 0. Problem Setting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-------------------------------------------------------%
% 0-1. subroutines
%-------------------------------------------------------%
addpath('Data\');
addpath('Plots\');
%-------------------------------------------------------%
% 0-2. discrete system and save mesh points
%-------------------------------------------------------%
h1 = 0.1; % initial coarse mesh width for refinement process
index_num = 1; % no refinement
[node, elem, isFreeNode] = generate_femgrids_disc2D(index_num, h1);
[Ah_h1, fh_h1, lBaG_h1, ~] = discrete_system_Poisson2D(node', elem', isFreeNode');
uh_h1 = Ah_h1 \ fh_h1;

index_num = 2;
[node, elem, isFreeNode] = generate_femgrids_disc2D(index_num, h1);
[Ah_h2, fh_h2, lBaG_h2, ~] = discrete_system_Poisson2D(node', elem', isFreeNode');
uh_h2 = Ah_h2 \ fh_h2;

index_num = 3;
[node, elem, isFreeNode] = generate_femgrids_disc2D(index_num, h1);
[Ah_h3, fh_h3, lBaG_h3, ~] = discrete_system_Poisson2D(node', elem', isFreeNode');
uh_h3 = Ah_h3 \ fh_h3;

index_num = 4;
[node, elem, isFreeNode] = generate_femgrids_disc2D(index_num, h1);
[Ah_h4, fh_h4, lBaG_h4, ~] = discrete_system_Poisson2D(node', elem', isFreeNode');
uh_h4 = Ah_h4 \ fh_h4;
%% 1. load neural Green's function for each task
%-------------------------------------------------------%
% task-1. acquire SgEncd Green's values on mesh points
%-------------------------------------------------------%
load(sprintf('Data/NN_Preconditioner_h%d.mat',1));
NN_Preconditioner_h1 = generate_Neural_Preconditioner(freePts, weights_diag, NN_G_diag_Qpts, NN_G_Fem);

load(sprintf('Data/NN_Preconditioner_h%d.mat',2));
NN_Preconditioner_h2 = generate_Neural_Preconditioner(freePts, weights_diag, NN_G_diag_Qpts, NN_G_Fem);

load(sprintf('Data/NN_Preconditioner_h%d.mat',3));
NN_Preconditioner_h3 = generate_Neural_Preconditioner(freePts, weights_diag, NN_G_diag_Qpts, NN_G_Fem);

load(sprintf('Data/NN_Preconditioner_h%d.mat',4));
NN_Preconditioner_h4 = generate_Neural_Preconditioner(freePts, weights_diag, NN_G_diag_Qpts, NN_G_Fem);
%-------------------------------------------------------%
% task-2. draw eigenvalue spectra of BA
%-------------------------------------------------------%
preconditioned_matrix_h1 = NN_Preconditioner_h1 * Ah_h1;
preconditioned_matrix_h2 = NN_Preconditioner_h2 * Ah_h2;
preconditioned_matrix_h3 = NN_Preconditioner_h3 * Ah_h3;
preconditioned_matrix_h4 = NN_Preconditioner_h4 * Ah_h4;

% plot eigenvalues
plot_preconditioned_eigvalues(preconditioned_matrix_h1, preconditioned_matrix_h2, preconditioned_matrix_h3, preconditioned_matrix_h4);
%-------------------------------------------------------%
% task-3. bicg solving linear algebraic system
%-------------------------------------------------------%
tol = 1e-16;
max_iter = 1e4;
%-------------------------------------------------------%
[x_bcg_h1,fl1,rrl_bcg_h1,iter_bcg_h1,rv1] = bicg(Ah_h1,fh_h1,tol,max_iter) ;
[x_prectd_bcg_h1,fl2,rr1_prectd_bcg_h1,iter_prectd_bcg_h1,rv2] = bicg(Ah_h1,fh_h1,rrl_bcg_h1,max_iter,@(x,flag)NN_Preconditioner_h1 * x);

[err_bcg_h1, res_bcg_h1]=compute_L2Err_Poisson2D(lBaG,node',elem',isFreeNode',Ah_h1,fh_h1,uh_h1,uh_Jacobi);

uh_h6 = Ah_h6\fh_h6;
err_bcg_h6 = sum( (x_bcg_h6 - uh_h6) .^2 .* h6, 1) .^ (1/2);
err_prectd_bcg_h6 = sum( (x_prectd_bcg_h6 - uh_h6) .^2 .* h6, 1) .^ (1/2);
%-------------------------------------------------------%
[x_bcg_h8,fl3,rrl_bcg_h8,iter_bcg_h8,rv3] = bicg(Ah_h8,fh_h8,tol,max_iter) ;
[x_prectd_bcg_h8,fl2,rr1_prectd_bcg_h8,iter_prectd_bcg_h8,rv2] = bicg(Ah_h8,fh_h8,rrl_bcg_h8,max_iter,@(x,flag)h8 * NN_Preconditioner_h8 * x);

uh_h8 = Ah_h8\fh_h8;
err_bcg_h8 = sum( (x_bcg_h8 - uh_h8) .^2 .* h8, 1) .^ (1/2);
err_prectd_bcg_h8 = sum( (x_prectd_bcg_h8 - uh_h8) .^2 .* h8, 1) .^ (1/2);
%-------------------------------------------------------%
[x_bcg_h10,fl5,rrl_bcg_h10,iter_bcg_h10,rv5] = bicg(Ah_h10,fh_h10,tol,max_iter) ;
[x_prectd_bcg_h10,fl2,rr1_prectd_bcg_h10,iter_prectd_bcg_h10,rv2] = bicg(Ah_h10,fh_h10,rrl_bcg_h10,max_iter,@(x,flag)h10 * NN_Preconditioner_h10 * x);

uh_h10 = Ah_h10\fh_h10;
err_bcg_h10 = sum( (x_bcg_h10 - uh_h10) .^2 .* h10, 1) .^ (1/2);
err_prectd_bcg_h10 = sum( (x_prectd_bcg_h10 - uh_h10) .^2 .* h10, 1) .^ (1/2);
%-------------------------------------------------------%
[x_bcg_h12,fl7,rrl_bcg_h12,iter_bcg_h12,rv7] = bicg(Ah_h12,fh_h12,tol,max_iter);
[x_prectd_bcg_h12,fl2,rr1_prectd_bcg_h12,iter_prectd_bcg_h12,rv2] = bicg(Ah_h12,fh_h12,rrl_bcg_h12,max_iter,@(x,flag)h12 * NN_Preconditioner_h12 * x);

uh_h12 = Ah_h12\fh_h12;
err_bcg_h12 = sum( (x_bcg_h12 - uh_h12) .^2 .* h12, 1) .^ (1/2);
err_prectd_bcg_h12 = sum( (x_prectd_bcg_h12 - uh_h12) .^2 .* h12, 1) .^ (1/2);
%-------------------------------------------------------%
fprintf('cg h=1/2^6: Iter %d Err %e \n ', iter_bcg_h1, err_bcg_h6);
fprintf('prectd bcg h=1/2^6: Iter %d Err %e \n',iter_prectd_bcg_h6, err_prectd_bcg_h6);
fprintf('cg h=1/2^8: Iter %d Err %e \n', iter_bcg_h8, err_bcg_h8);
fprintf('prectd bcg h=1/2^8: Iter %d Err %e \n',iter_prectd_bcg_h8, err_prectd_bcg_h8);
fprintf('cg h=1/2^10: Iter %d Err %e \n', iter_bcg_h10, err_bcg_h10);
fprintf('prectd bcg h=1/2^10: Iter %d Err %e \n',iter_prectd_bcg_h10, err_prectd_bcg_h10);
fprintf('cg h=1/2^12: Iter %d Err %e \n', iter_bcg_h12, err_bcg_h12);
fprintf('prectd bcg h=1/2^12: Iter %d Err %e \n',iter_prectd_bcg_h12, err_prectd_bcg_h12);



